@charset "utf-8";
@use "sass:map";
@use "sass:color";

/*--------------------------------------------------
Variable
--------------------------------------------------*/

$basicFontSize: 1.6rem; //16px
$basicFontFamily: "Yu Gothic", "Arial", sans-serif;
$basicFontColor: #403D36;
$basicBackgroundColor: #fff;

$ts01: 0.3s ease-out;
$opacity: 0.6;

// カラー
// $tmcol: #003201;
// $subcol: #00265F;

$basecol: #f4f1ee;
$sidecol01: #ddd4cc;
$sidecol02: #526f50;
$accentcol: #cabdb1;

// ヘッダー高さ
$pchdr_h: 77px; //PCのとき
$sphdr_h: 77px; //spのとき

// PCインナー
$pcwin_inr_w: 1200px;

// Windowサイズ
$pcwin: 1440;
$spwin: 375;

/*---------- フォント ----------*/

$ryumin: 'A-OTF Ryumin Pr6N', 'MS Mincho', 'ＭＳ 明朝', 'Hiragino Mincho Pro', 'ヒラギノ明朝 Pro', 'Noto Serif CJK JP', serif;
;
$yumincho: 'Yu Mincho', 'YuMincho', serif;


/*--------------------------------------------------
Mixin
--------------------------------------------------*/

/*---------- Responsive ----------*/

$breakpoints: (
	'common': '',
	//共通
	'pc': 'all and (min-width: 768px)',
	'sp': 'screen and (max-width: 767px)',
	'tb': 'screen and (max-width: 1024px)'
);

@mixin responsive($media, $division: '') {
	@if map.has-key($breakpoints, $media) {
		@if $media =='common' {
			@content;
		}

		@else {
			@if $division !='' {
				//PC幅内で切り替えがあるとき
				$division: " and (max-width:#{$division})";
			}

			@media #{map.get($breakpoints, $media)}#{$division} {
				@content;
			}
		}
	}

	// マップ型で定義されていない値が呼び出された時はエラーを返す
	@else {
		@error "指定されたブレークポイントは定義されていません。"+"指定できるブレークポイントは次のとおりです。 -> #{map.keys($breakpoints)}";
	}
}


/*---------- fade animetion ----------*/


/*---------- icon ----------*/

/*---------- mixin ----------*/
@function cs($size) {
	@return #{'max(#{calc($size / $pcwin) * 100}vw, #{$size}px)'};

}

@function csClmp($minSize, $maxSize) {
	@return #{'clamp(#{$minSize}px, #{calc($maxSize / $pcwin) * 100}vw, #{$maxSize}px)'};

}

@mixin ls($value) {
	letter-spacing: calc($value / 1000) + em;
}

@mixin fs($size: 10) {
	font-size: calc($size / 10) + rem;
}

@mixin lh($size, $height) {
	line-height: calc($height / $size);
}

@mixin fw($weight) {
	@if ($weight==r) {
		font-weight: 400;
	}

	@if ($weight==m) {
		font-weight: 500;
	}

	@if ($weight==b) {
		font-weight: 700;
	}
}

@mixin wh($w, $h) {
	width: $w;
	height: $h;
}

@mixin ellipsis($lines: 1) {
	@if $lines ==1 {
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
	}

	@else {
		display: -webkit-box;
		-webkit-box-orient: vertical;
		/* Change the line bellow to see the magic! */
		-webkit-line-clamp: $lines;
		overflow: hidden;
		text-overflow: unset;
		white-space: unset;
	}
}

@mixin flexCenter($direction) {
	display: flex;

	@if ($direction==v) {
		align-items: center;
	}

	@if ($direction==h) {
		justify-content: center;
	}

	@if ($direction==c) {
		align-items: center;
		justify-content: center;
	}
}

@mixin absCenter($direction) {
	position: absolute;

	@if ($direction==v) {
		top: 0;
		bottom: 0;
		margin-top: auto;
		margin-bottom: auto;
	}

	@if ($direction==h) {
		left: 0;
		right: 0;
		margin-left: auto;
		margin-right: auto;
	}

	@if ($direction==c) {
		inset: 0;
		margin: auto;
	}
}

@mixin bgImg($w: 0, $h: 0, $url: '') {
	@include wh($w, $h);
	background: url($url) no-repeat;
	background-size: contain;
	background-position: center;
}

@mixin fade($type) {
	@if $type=="hide" {
		visibility: hidden;
		opacity: 0;
		transition: visibility 1s, opacity 1s;
	}

	@else if $type=="show" {
		visibility: visible;
		opacity: 1;
		transition: visibility 1s, opacity 1s;
	}
}